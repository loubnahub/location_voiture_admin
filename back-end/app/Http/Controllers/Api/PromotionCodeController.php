<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\PromotionCode;
use App\Models\PromotionCampaign; // For dropdowns/linking
use App\Models\User;              // For dropdowns/linking
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Enums\PromotionCodeStatus; // Your Enum
use Illuminate\Validation\Rule;
use App\Enums\PromotionRewardType; // For reward type
use Illuminate\Validation\Rules\Enum; // For Enum validation
use Illuminate\Support\Str; // For generating code strings
use Illuminate\Support\Facades\Log;
use Carbon\Carbon; 
class PromotionCodeController extends Controller
{
    protected function transformPromotionCode(PromotionCode $code): array
    {
        $code->loadMissing(['promotionCampaign:id,name', 'user:id,full_name,email', 'bookingUsedOn:id']);

        return [
            'id' => $code->id,
            'promotion_campaign_id' => $code->promotion_campaign_id,
            'campaign_name' => $code->promotionCampaign?->name,
            'user_id' => $code->user_id,
            'user_name' => $code->user?->full_name,
            'user_email' => $code->user?->email,
            'code_string' => $code->code_string,
            'issued_at' => $code->issued_at?->toIso8601String(),
            'expires_at' => $code->expires_at?->toIso8601String(),
            'status' => $code->status, // Enum instance or its value
            'status_display' => $code->status?->label ?? ucfirst(str_replace('_', ' ', $code->status?->value ?? '')), // Use label from Enum if exists
            'used_at' => $code->used_at?->toIso8601String(),
            'used_on_booking_id' => $code->used_on_booking_id,
            'booking_ref_used_on' => $code->used_on_booking_id ? 'Booking #' . substr($code->used_on_booking_id, 0, 8) . '...' : null,
        ];
    }

    public function index(Request $request)
    {
        // Add authorization
        $query = PromotionCode::query()->with(['promotionCampaign:id,name', 'user:id,full_name,email']);

        if ($request->filled('search')) {
            $searchTerm = $request->input('search');
            $query->where(function ($q) use ($searchTerm) {
                $q->where('code_string', 'LIKE', "%{$searchTerm}%")
                  ->orWhereHas('user', fn($uq) => $uq->where('full_name', 'LIKE', "%{$searchTerm}%")->orWhere('email', 'LIKE', "%{$searchTerm}%"))
                  ->orWhereHas('promotionCampaign', fn($cq) => $cq->where('name', 'LIKE', "%{$searchTerm}%"));
            });
        }
        if ($request->filled('promotion_campaign_id')) {
            $query->where('promotion_campaign_id', $request->input('promotion_campaign_id'));
        }
        if ($request->filled('user_id')) {
            $query->where('user_id', $request->input('user_id'));
        }
        if ($request->filled('status')) {
            $status = $request->input('status');
            if (PromotionCodeStatus::tryFrom($status)) { // Validate against enum
                $query->where('status', $status);
            }
        }

        $sortBy = $request->input('sort_by', 'issued_at');
        $sortDirection = $request->input('sort_direction', 'desc');
        $allowedSorts = ['code_string', 'issued_at', 'expires_at', 'status', 'used_at'];
        if (in_array($sortBy, $allowedSorts)) {
            $query->orderBy($sortBy, $sortDirection);
        } else {
            $query->orderBy('issued_at', 'desc');
        }

        if ($request->boolean('all')) {
            $codes = $query->get();
            return response()->json(['data' => $codes->map(fn($c) => $this->transformPromotionCode($c))]);
        } else {
            $perPage = $request->input('per_page', config('pagination.default_per_page', 15));
            $codesPaginated = $query->paginate((int)$perPage);
            $codesPaginated->getCollection()->transform(fn($c) => $this->transformPromotionCode($c));
            return response()->json($codesPaginated);
        }
    }

    // For manually creating a specific code (e.g., a one-off marketing code)
    // Codes generated by campaigns (loyalty) are handled by the listener.
    public function store(Request $request)
    {
        // Add authorization

        $validator = Validator::make($request->all(), [
            'promotion_campaign_id' => 'required|uuid|exists:promotion_campaigns,id',
            'user_id' => 'nullable|uuid|exists:users,id', // Can be null if code is generic
            'code_string' => 'required|string|max:50|unique:promotion_codes,code_string',
            'expires_at' => 'nullable|date|after_or_equal:issued_at', // Ensure expires_at is after issued_at
            'status' => ['required', Rule::in(array_column(PromotionCodeStatus::cases(), 'value'))],
            'issued_at' => 'sometimes|date', // Default to now if not provided
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $validatedData = $validator->validated();
        $validatedData['issued_at'] = $validatedData['issued_at'] ?? now(); // Default issued_at to now

        // If expires_at is not provided, try to derive from campaign's code_validity_days
        if (empty($validatedData['expires_at']) && !empty($validatedData['promotion_campaign_id'])) {
            $campaign = PromotionCampaign::find($validatedData['promotion_campaign_id']);
            if ($campaign && $campaign->code_validity_days) {
                $validatedData['expires_at'] = Carbon::parse($validatedData['issued_at'])->addDays($campaign->code_validity_days);
            } elseif($campaign && $campaign->end_date && $campaign->end_date->isFuture()){
                 $validatedData['expires_at'] = $campaign->end_date; // Fallback to campaign end_date if future
            }
            // else expires_at remains null (never expires unless campaign itself ends)
        }


        $promotionCode = PromotionCode::create($validatedData);

        return response()->json([
            'data' => $this->transformPromotionCode($promotionCode),
            'message' => 'Promotion code created successfully.'
        ], 201);
    }

    public function show(PromotionCode $promotionCode)
    {
        // Add authorization
        return response()->json(['data' => $this->transformPromotionCode($promotionCode)]);
    }

    // Mainly for updating status (e.g., deactivate) or perhaps expiry date.
    // Code string, campaign, user usually shouldn't be changed after creation.
    public function update(Request $request, PromotionCode $promotionCode)
    {
        // Add authorization

        $validator = Validator::make($request->all(), [
            // 'promotion_campaign_id' => 'sometimes|required|uuid|exists:promotion_campaigns,id', // Usually not changed
            // 'user_id' => 'nullable|uuid|exists:users,id', // Usually not changed
            // 'code_string' => ['sometimes', 'required', 'string', 'max:50', Rule::unique('promotion_codes')->ignore($promotionCode->id)], // Usually not changed
            'expires_at' => 'nullable|date|after_or_equal:issued_at',
            'status' => ['sometimes', 'required', Rule::in(array_column(PromotionCodeStatus::cases(), 'value'))],
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $promotionCode->update($validator->validated());
        Log::info('PromotionCodeController@update: Code updated successfully', ['id' => $promotionCode->id]);

        return response()->json([
            'data' => $this->transformPromotionCode($promotionCode->fresh()),
            'message' => 'Promotion code updated successfully.'
        ]);
    }

    public function destroy(PromotionCode $promotionCode)
    {
        

        $promotionCode->delete();

        return response()->json(['message' => 'Promotion code deleted successfully.'], 200);
    }

    /**
     * Get a list of users for dropdowns (simplified).
     * In a real app, this might be paginated or searchable.
     */
    public function getUsersForDropdown(Request $request)
    {
        $users = User::orderBy('full_name')->select(['id', 'full_name', 'email'])->get();
        return response()->json(['data' => $users]);
    }

    /**
     * Get a list of active promotion campaigns for dropdowns.
     */
    public function getCampaignsForDropdown(Request $request)
    {
        $campaigns = PromotionCampaign::where('is_active', true)
                        ->orderBy('name')
                        ->select(['id', 'name'])
                        ->get();
        return response()->json(['data' => $campaigns]);
    }
       public function validateAndApplyPreview(Request $request)
    {
        Log::info('PromotionCodeController@validateAndApplyPreview: Request received', $request->all());

        $validator = Validator::make($request->all(), [
            'code_string' => 'required|string|max:50',
            'booking_subtotal' => 'required|numeric|min:0', // Sum of base, extras, insurance before discount
            'user_id' => 'nullable|uuid|exists:users,id', // To check user-specific codes
            'vehicle_id' => 'nullable|uuid|exists:vehicles,id', // To check vehicle-specific campaigns (future)
            // Potentially add 'booking_start_date', 'booking_end_date' if campaigns have date restrictions for applicability
        ]);

        if ($validator->fails()) {
            Log::warning('PromotionCodeController@validateAndApplyPreview: Validation failed', $validator->errors()->toArray());
            return response()->json(['message' => 'Invalid input.', 'errors' => $validator->errors()], 422);
        }

        $codeString = strtoupper($request->input('code_string'));
        $subtotal = (float) $request->input('booking_subtotal');
        $userId = $request->input('user_id');
        // $vehicleId = $request->input('vehicle_id');

        $promoCode = PromotionCode::where('code_string', $codeString)
            ->with('promotionCampaign') // Eager load campaign details
            ->first();

        if (!$promoCode) {
            return response()->json(['message' => 'Promotion code not found.'], 404);
        }

        // --- Start Validation Logic for the Code ---
        if ($promoCode->status !== PromotionCodeStatus::ACTIVE) {
            return response()->json(['message' => 'This promotion code is not currently active.'], 422);
        }

        if ($promoCode->expires_at && Carbon::parse($promoCode->expires_at)->isPast()) {
            // Optionally, update status to EXPIRED here
            // $promoCode->status = PromotionCodeStatus::EXPIRED;
            // $promoCode->save();
            return response()->json(['message' => 'This promotion code has expired.'], 422);
        }

        if ($promoCode->user_id && $promoCode->user_id !== $userId) {
            return response()->json(['message' => 'This promotion code is not valid for your account.'], 422);
        }

        if (!$promoCode->promotionCampaign || !$promoCode->promotionCampaign->is_active) {
            return response()->json(['message' => 'The campaign associated with this code is not active.'], 422);
        }

        $campaign = $promoCode->promotionCampaign;
        if ($campaign->start_date && Carbon::parse($campaign->start_date)->isFuture()) {
            return response()->json(['message' => 'The campaign for this code has not started yet.'], 422);
        }
        if ($campaign->end_date && Carbon::parse($campaign->end_date)->isPast()) {
            return response()->json(['message' => 'The campaign for this code has ended.'], 422);
        }

        // TODO: Add more complex validation if needed:
        // - Minimum booking value for campaign
        // - Specific vehicle models/types for campaign
        // - Usage limits per user for campaign/code
        // --- End Validation Logic ---


        // If all checks pass, calculate the discount
        $discountAmount = 0;
        if ($subtotal > 0) { // Only apply discount if there's something to discount
            if ($campaign->reward_type === PromotionRewardType::PERCENTAGE) {
                $discountAmount = ($subtotal * $campaign->reward_value) / 100;
            } elseif ($campaign->reward_type === PromotionRewardType::FIXED_AMOUNT) {
                $discountAmount = $campaign->reward_value;
            }
            // Ensure discount doesn't exceed subtotal
            $discountAmount = min($discountAmount, $subtotal);
        }


        Log::info('PromotionCodeController@validateAndApplyPreview: Code validated successfully.', [
            'code_id' => $promoCode->id,
            'discount_amount' => $discountAmount
        ]);

        return response()->json([
            'message' => 'Promotion code is valid.',
            'data' => [
                'promotion_code_id' => $promoCode->id,
                'code_string' => $promoCode->code_string,
                'discount_amount' => round($discountAmount, 2),
                'reward_type' => $campaign->reward_type?->value,
                'reward_value' => (float) $campaign->reward_value,
                'campaign_name' => $campaign->name,
            ]
        ]);
    }
}
